{
  "name": "yaot",
  "version": "1.1.3",
  "description": "Yet another octree",
  "main": "index.js",
  "scripts": {
    "test": "tap test/*.js",
    "start": "browserify demo/octree.js > demo/bundle_tree.js && browserify demo/raycaster.js > demo/bundle_ray.js",
    "perf": "npm version && node perf/index.js"
  },
  "keywords": [
    "quadtree",
    "octree",
    "oct",
    "tree",
    "octrie",
    "quadtrie"
  ],
  "author": {
    "name": "Andrei Kashcha"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/anvaka/yaot.git"
  },
  "dependencies": {
    "rafor": "^1.0.2"
  },
  "devDependencies": {
    "benchmark": "^1.0.0",
    "tap": "^1.3.2",
    "three": "^0.71.0"
  },
  "gitHead": "47c3c9118482877ac351747af18aebde8f6f7f77",
  "readme": "# yaot [![Build Status](https://travis-ci.org/anvaka/yaot.svg)](https://travis-ci.org/anvaka/yaot)\n\nOctree in javascript. Extremely fast module to query points in 3D space. Can\nbe used to find points under mouse cursor in 3D scene. Compare: [hit-test\nspeed with native three.js vs octree](https://www.youtube.com/watch?v=9Z-Yzb-WSKg)\n\n# usage\n\nThis module is best suited for static scenes, where points are not changed\nover time. To get started initialize the tree:\n\n``` js\n// First we need to create the tree:\nvar createTree = require('yaot');\n\nvar tree = createTree();\nvar points = [\n  0, 0, 0, // First point at 0, 0, 0\n  10, 0, 0 // second point at 10, 0, 0\n]\ntree.init(points);\n\n// Now we are ready to query it:\n// Which points lie inside sphere with center at 0, 0, 0 and radius 2?\nvar matches = tree.intersectSphere(0, 0, 0, 2);\n// matches[0] === 0 -> the point at first index of `points` array is there!\n\n// Let's extend our sphere:\nvar matches = tree.intersectSphere(0, 0, 0, 20);\n// matches[0] === 0 -> Point at index 0 is here too\n// matches[1] === 3 -> Point at index 3 from `points` array also inisde\n```\n\nYou can also query points which lies inside octants intersected by a ray. This\nis very useful when you want to know which points lie under mouse cursor.\n\n``` js\nvar rayOrigin = {\n  x: 1, y: 0, z: 0\n};\nvar rayDirection = {\n  x: -1, y: 0, z: 0\n};\nvar matches = tree.intersectRay(rayOrigin, rayDirection)\n\n// If you want to limit where ray starts checking against intersection\n// you can pass option `near` argumnet:\nvar near = 10; // by default it is 0, but could be made bigger!\nvar matches10PixelsAway = tree.intersectRay(rayOrigin, rayDirection, near);\n\n// You can also limit upper bound by setting `far` argument:\nvar far = 100; // By default it is positive infinity, which matches all.\nvar matchesPointsBetween10And100Pixels =\n    tree.intersectRay(rayOrigin, rayDirection, near, far);\n```\n\nTo see how to use it with three.js please read about demo below.\n\n# demo\n\nA three.js demo is available [here](http://anvaka.github.io/yaot/demo/octree.html) ([src](https://github.com/anvaka/yaot/blob/master/demo/octree.js#L104)).\nYou can compare its performance to native three.js [`raycaster.intersectObjects()`\nmethod](http://anvaka.github.io/yaot/demo/raycaster.html) ([src](https://github.com/anvaka/yaot/blob/master/demo/raycaster.js#L103)).\nOpen dev console on both pages to see the timers. Octree solution is 42 times faster than\nnative `raycaster.intersectObjects()`.\n\nKeep in mind that raycaster is generalized solution which works with any three.js\nobjects, while octree is very much specialized.\n\nThis module is also used in the [code galaxies](http://anvaka.github.io/pm/).\nSource code is [here](https://github.com/anvaka/unrender/blob/master/lib/hit-test.js).\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install yaot\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/anvaka/yaot/issues"
  },
  "homepage": "https://github.com/anvaka/yaot#readme",
  "_id": "yaot@1.1.3",
  "_shasum": "6b161c652a41a04edd0d6d09a61662802a08ed7f",
  "_from": "git+https://github.com/anvaka/yaot.git",
  "_resolved": "git+https://github.com/anvaka/yaot.git#47c3c9118482877ac351747af18aebde8f6f7f77"
}
